require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TasksController do

  describe 'GET index' do
    
    before(:each) do
      @user1 = FactoryGirl.create(:user_with_tasks, email: 'user1@e.mail')
      FactoryGirl.create(:user_with_tasks, email: 'user2@e.mail').tasks.last.collaborators << @user1
      sign_in @user1
    end
    
    it 'assigns all users tasks as @tasks' do
      get :index
      assigns(:tasks).should match_array(@user1.tasks)
    end
    
    it 'assigns all shated tasks as @tasks' do
      get :index
      assigns(:shared_tasks).should match_array(@user1.shared_tasks)
    end
    
  end

  describe 'GET new' do
    it 'assigns a new task as @task' do
      user = FactoryGirl.create(:user)
      sign_in user
      get :new
      assigns(:task).should be_a_new(Task)
    end
  end

  describe 'GET edit' do
    it 'assigns the requested task as @task' do
      user = FactoryGirl.create(:user_with_tasks)
      sign_in user
      task = user.tasks.last
      get :edit, {:id => task.to_param}
      assigns(:task).should eq(task)
    end
  end

  describe 'POST create' do
    
    before(:each) do
      user = FactoryGirl.create(:user)
      sign_in user
    end
    
    describe 'with valid params' do
      it 'creates a new Task' do
        expect {
          post :create, {:task => FactoryGirl.attributes_for(:task)}
        }.to change(Task, :count).by(1)
      end

      it 'assigns a newly created task as @task' do
        post :create, {:task => FactoryGirl.attributes_for(:task)}
        assigns(:task).should be_a(Task)
        assigns(:task).should be_persisted
      end

      it 'redirects to the index page' do
        post :create, {:task => FactoryGirl.attributes_for(:task)}       
        response.should redirect_to(:action => :index, :notice => 'Task was successfully created.')
      end
    end

    describe 'with invalid params' do
      it 'assigns a newly created but unsaved task as @task' do
        # Trigger the behavior that occurs when invalid params are submitted
        Task.any_instance.stub(:save).and_return(false)
        post :create, {:task => {}}
        assigns(:task).should be_a_new(Task)
      end

      it 're-renders the "new" template' do
        # Trigger the behavior that occurs when invalid params are submitted
        Task.any_instance.stub(:save).and_return(false)
        post :create, {:task => {}}
        response.should render_template('new')
      end
    end
  end

  describe 'PUT update' do
    
    before(:each) do
      user = FactoryGirl.create(:user_with_tasks)
      @task = user.tasks.last
      sign_in user
    end
    
    describe 'with valid params' do
      it 'updates the requested task' do
        # Assuming there are no other tasks in the database, this
        # specifies that the Task created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Task.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => @task.to_param, :task => {'these' => 'params'}}
      end

      it 'assigns the requested task as @task' do
        put :update, {:id => @task.to_param}
        assigns(:task).should eq(@task)
      end

      it 'redirects to the index page' do
        put :update, {:id => @task.to_param}
        response.should redirect_to(:action => :index, :notice => 'Task was successfully updated.')
      end
    end

    describe 'with invalid params' do
      it 'assigns the task as @task' do
        # Trigger the behavior that occurs when invalid params are submitted
        Task.any_instance.stub(:save).and_return(false)
        put :update, {:id => @task.to_param, :task => {}}
        assigns(:task).should eq(@task)
      end

      it 're-renders the "edit" template' do
        # Trigger the behavior that occurs when invalid params are submitted
        Task.any_instance.stub(:save).and_return(false)
        put :update, {:id => @task.to_param, :task => {}}
        response.should render_template('edit')
      end
    end
  end

  describe 'DELETE destroy' do
    
    before(:each) do
      user = FactoryGirl.create(:user_with_tasks)
      @task = user.tasks.last
      sign_in user
    end
    
    it 'destroys the requested task' do
      expect {
        delete :destroy, {:id => @task.to_param}
      }.to change(Task, :count).by(-1)
    end

    it 'redirects to the tasks list' do
      delete :destroy, {:id => @task.to_param}
      response.should redirect_to(:action => :index)
    end
  end
  
  describe 'POST share' do
    before(:each) do
      user1 = FactoryGirl.create(:user_with_tasks, email: 'user1@e.mail')
      @user2 = FactoryGirl.create(:user_with_tasks, email: 'user2@e.mail')
      user1.tasks.last
      @task = user1.tasks.last
      sign_in user1
    end
    
    context 'user side' do
      it 'should add task to shared' do
        post :share, {:id => @task.to_param, :user => {:email => @user2.email}}
        @user2.shared_tasks.should include(@task)
      end
      
      it 'should increase shared tasks by 1' do
        expect {
          post :share, {:id => @task.to_param, :user => {:email => @user2.email}}
        }.to change(@user2.shared_tasks, :count).by(1)
      end
      
    end
    
    context 'task side' do
      it 'should add user to collaborators' do
        post :share, {:id => @task.to_param, :user => {:email => @user2.email}}
        @task.collaborators.should include(@user2)
      end
      
      it 'should increase collaborators by 1' do
        expect {
          post :share, {:id => @task.to_param, :user => {:email => @user2.email}}
        }.to change(@task.collaborators, :count).by(1)
      end
    end
    
    it 'should redirect to the tasks list' do
      post :share, {:id => @task.to_param, :user => {:email => @user2.email}}
      response.should redirect_to(:action => :index)
    end
  end

end
